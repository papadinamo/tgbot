import json
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes


class FinanceBot:
    def __init__(self):
        self.data_file = 'finance_data.json'
        self.data = self.load_data()

    def load_data(self):
        return json.load(open(self.data_file, 'r')) if os.path.exists(self.data_file) else {}

    def save_data(self):
        with open(self.data_file, 'w') as f:
            json.dump(self.data, f, indent=2)

    def get_user_data(self, user_id):
        if str(user_id) not in self.data:
            self.data[str(user_id)] = {'transactions': [], 'categories': {}, 'reminders': []}
        return self.data[str(user_id)]


bot = FinanceBot()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    buttons = [
        [InlineKeyboardButton("‚ûï –î–æ—Ö–æ–¥", callback_data="income"),
         InlineKeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥", callback_data="expense")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
         InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data="tips")],
        [InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders")]
    ]
    return InlineKeyboardMarkup(buttons)


def reminders_menu():
    buttons = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_reminder")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
    ]
    return InlineKeyboardMarkup(buttons)


def category_menu(type_):
    categories = ['–µ–¥–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–∫–æ–º–º—É–Ω–∞–ª–∫–∞', '–¥—Ä—É–≥–æ–µ'] if type_ == 'expense' else ['–∑–∞—Ä–ø–ª–∞—Ç–∞',
                                                                                                         '–ø–æ–¥–∞—Ä–æ–∫',
                                                                                                         '–¥—Ä—É–≥–æ–µ']
    buttons = [[InlineKeyboardButton(cat, callback_data=f"cat_{type_}_{cat}")] for cat in categories]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(buttons)


# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏:", reply_markup=main_menu())


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data in ["income", "expense"]:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_menu(data))
    elif data.startswith("cat_"):
        _, type_, category = data.split("_")
        context.user_data['input'] = {'type': type_, 'category': category}
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {category}:")
    elif data == "stats":
        await show_stats(query)
    elif data == "tips":
        await show_tips(query)
    elif data == "reminders":
        await show_reminders(query)
    elif data == "add_reminder":
        context.user_data['waiting_reminder'] = True
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    elif data == "back":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if 'input' in context.user_data:
        try:
            amount = float(text)
            input_data = context.user_data['input']
            user_data = bot.get_user_data(user_id)

            transaction = {
                'amount': amount, 'category': input_data['category'],
                'type': input_data['type'], 'date': datetime.now().strftime("%d.%m %H:%M")
            }
            user_data['transactions'].append(transaction)

            if input_data['type'] == 'expense':
                user_data['categories'][input_data['category']] = user_data['categories'].get(input_data['category'],
                                                                                              0) + amount

            bot.save_data()
            await update.message.reply_text(f"‚úÖ {amount}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu())
            del context.user_data['input']
        except:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    elif context.user_data.get('waiting_reminder'):
        user_data = bot.get_user_data(user_id)
        reminder = {
            'text': text,
            'date': datetime.now().strftime("%Y.%m.%d")
        }
        user_data['reminders'].append(reminder)
        bot.save_data()

        await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu())
        del context.user_data['waiting_reminder']


async def show_stats(query):
    user_data = bot.get_user_data(query.from_user.id)
    transactions = user_data['transactions'][-10:]

    income = sum(t['amount'] for t in transactions if t['type'] == 'income')
    expense = sum(t['amount'] for t in transactions if t['type'] == 'expense')

    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\nüí∞ –î–æ—Ö–æ–¥—ã: {income}‚ÇΩ\nüí∏ –†–∞—Å—Ö–æ–¥—ã: {expense}‚ÇΩ\n‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {income - expense}‚ÇΩ\n\n"

    if user_data['categories']:
        text += "üìà –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        for cat, amount in user_data['categories'].items():
            text += f"‚Ä¢ {cat}: {amount}‚ÇΩ\n"

    await query.edit_message_text(text, reply_markup=main_menu())


async def show_tips(query):
    tips = [
        "üí° –í–µ–¥–∏—Ç–µ —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
        "üí° –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 10-20% –æ—Ç –¥–æ—Ö–æ–¥–∞",
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 50/30/20",
        "üí° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"
    ]
    await query.edit_message_text("\n".join(tips), reply_markup=main_menu())


async def show_reminders(query):
    user_data = bot.get_user_data(query.from_user.id)
    text = "‚è∞ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"

    if user_data['reminders']:
        for reminder in user_data['reminders']:
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç(–¥–∞—Ç–∞)
            text += f"‚Ä¢ {reminder['text']}({reminder['date']})\n"
    else:
        text += "üì≠ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å"

    await query.edit_message_text(text, reply_markup=reminders_menu())


async def add_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        user_data = bot.get_user_data(update.effective_user.id)
        reminder = {
            'text': " ".join(context.args),
            'date': datetime.now().strftime("%Y.%m.%d")
        }
        user_data['reminders'].append(reminder)
        bot.save_data()
        await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu())


def main():
    app = Application.builder().token("8432210308:AAEka9JZru55_GQE_3ovFwvwC_9oRkURAc8").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("remind", add_reminder))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()